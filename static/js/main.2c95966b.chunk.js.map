{"version":3,"sources":["components/form.js","components/queue.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","queueMethod","name","placeholder","value","React","Component","Queue","category","number","i","App","state","undefined","error","generateQueue","e","a","preventDefault","target","elements","categoriesName","A","B","C","D","console","log","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAmBeA,E,iLAfX,OACE,0BAAMC,SAAUC,KAAKC,MAAMC,aACzB,2BAAG,4BAAQC,KAAK,WAAWC,YAAY,2GACvC,4BAAQC,MAAM,KAAd,oCACA,4BAAQA,MAAM,KAAd,oCACA,4BAAQA,MAAM,KAAd,oCACA,4BAAQA,MAAM,KAAd,sCAGA,2BAAG,yH,GAXQC,IAAMC,WCiBVC,E,iLAZX,OACE,6BACCR,KAAKC,MAAMQ,UACZ,6BACA,2JAA6BT,KAAKC,MAAMQ,UACxC,4HAAuBT,KAAKC,MAAMS,c,GATpBJ,IAAMC,WCEtBI,G,MAAE,GA8CSC,E,2MA1CbC,MAAQ,CACNJ,cAAUK,EACVJ,YAAQI,EACRC,WAAOD,G,EAITE,c,uCAAgB,WAAOC,GAAP,mBAAAC,EAAA,sDACdD,EAAEE,iBACIV,EAAWQ,EAAEG,OAAOC,SAASZ,SAASJ,MACtCiB,EAAiB,CACrBC,EAAG,2DACHC,EAAG,2DACHC,EAAG,2DACHC,EAAG,4DAELC,QAAQC,IAAInB,GACZkB,QAAQC,IAAIN,EAAeb,IAGvBC,EAASD,EAAS,MAAME,EAC5BA,GAAI,EAEJ,EAAKkB,SAAS,CACZpB,SAAUa,EAAeb,GACzBC,OAAQA,EACRK,MAAO,KAnBK,2C,8HAyBd,OACE,6BACA,+IACE,kBAAC,EAAD,CAAMb,YAAaF,KAAKgB,gBACxB,kBAAC,EAAD,CAAOP,SAAUT,KAAKa,MAAMJ,SAAUC,OAAQV,KAAKa,MAAMH,OAAQK,MAAOf,KAAKa,MAAME,a,GAtCzET,IAAMC,WCKJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2c95966b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n  render () {\r\n    return(\r\n      <form onSubmit={this.props.queueMethod}>\r\n        <p><select name=\"category\" placeholder=\"Выберите категорию\">\r\n        <option value=\"A\">Опция 1</option>\r\n        <option value=\"B\">Опция 2</option>\r\n        <option value=\"C\">Опция 3</option>\r\n        <option value=\"D\">Опция 4</option>\r\n        </select></p>\r\n\r\n        <p><button>Получить номер</button></p>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\n\r\nclass Queue extends React.Component {\r\n\r\n\r\n  render () {\r\n    return(\r\n      <div>\r\n    {  this.props.category &&\r\n      <div>\r\n      <p>Вы обратились по поводу: {this.props.category}</p>\r\n      <p>Ваш номер очереди: {this.props.number}</p>\r\n      </div> }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Queue;\r\n","import React from 'react';\nimport Form from \"./components/form.js\";\nimport Queue from \"./components/queue.js\";\nimport './App.css';\n\nvar i=0;\n\nclass App extends React.Component {\n\n  state = {\n    category: undefined,\n    number: undefined,\n    error: undefined\n  }\n\n\n  generateQueue = async (e) => {\n    e.preventDefault();\n    const category = e.target.elements.category.value;\n    const categoriesName = {\n      A: \"Категория 1\",\n      B: \"Категория 2\",\n      C: \"Категория 3\",\n      D: \"Категория 4\",\n    }\n    console.log(category);\n    console.log(categoriesName[category]);\n\n\n    var number = category+\" - \"+i;\n    i=i+1;\n\n    this.setState({\n      category: categoriesName[category],\n      number: number,\n      error: \"\"\n    });\n\n  }\n\n  render () {\n    return(\n      <div>\n      <h1> Электронный деканат </h1>\n        <Form queueMethod={this.generateQueue}/>\n        <Queue category={this.state.category} number={this.state.number} error={this.state.error}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}